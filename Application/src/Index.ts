import PortManager from './SerialManager'

import {app, BrowserWindow} from 'electron';

import AtomMain from "./AtomMain";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let mainWindow: BrowserWindow;

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 1080,
    width: 1920,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      sandbox: false
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  AtomMain.mainWindow = mainWindow;
  // mainWindow.webContents.once('dom-ready', () => setRecoil(JSON_Data_RX, "HELLO"));
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// ipcMain.on('LED:On', (event, title) => {
//   // PortManager.Write({"LED": true});
//   // setTimeout(() => PortManager.Write({"LED": false}), 1000);
//   console.log("Got a button event!");
// })

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
// eslint-disable-next-line @typescript-eslint/no-var-requires

// port_manager.List().then((port_names) => console.log(port_names))

// app.whenReady().then(() => {
//   installExtension(REACT_DEVELOPER_TOOLS)
//     .then((name) => console.log(`Added Extension:  ${name}`))
//     .catch((err) => console.log('An error occurred: ', err));
// });

// let port_manager: PortManager;


import { ipcMain } from './IPCInterface'

const { handle, invoke } = ipcMain

app.whenReady().then(() => {
  // port_manager = new PortManager();
  // port_manager.SetDataRecieveCallback(AtomMain.SerialDataRX);
  // setInterval(() => { port_manager.List().then((value) => AtomMain.SerialList(value)); console.log("Interval");}, 1000);


  handle.getPing()

  mainWindow.webContents.on('dom-ready', () => {
    invoke.getPong(mainWindow, 'pong')
  })
});

// ipcMain.handle('Serial:Connected', () => port_manager.Connected);
// ipcMain.handle('Serial:Disconnect', () => port_manager.Disconnect()); // NOTE: This has to be a separate (or inline) function (it cannot be passed directly to ipcMain.handle) as it seems to be copied and thus the object is not consistent (you get cannot read property of undefined errors)
// ipcMain.handle('Serial:Connect', (event, data): boolean => {
//   return port_manager.Connect(data.path, data.baud)
// });
