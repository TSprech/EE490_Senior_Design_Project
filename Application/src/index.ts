import { app, BrowserWindow, ipcMain } from 'electron';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

ipcMain.on('LED:On', (event, title) => {
  // PortManager.Write({"LED": true});
  // setTimeout(() => PortManager.Write({"LED": false}), 1000);
  console.log("Got a button event!");
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
// eslint-disable-next-line @typescript-eslint/no-var-requires
const {SerialPort, BindingPort, PortInfo} = require('serialport');
// eslint-disable-next-line @typescript-eslint/no-var-requires
const {ReadlineParser} = require('@serialport/parser-readline');
// eslint-disable-next-line @typescript-eslint/no-var-requires
const EventEmitter = require('events');

class PortManager {
  static port: typeof BindingPort;
  static parser: typeof ReadlineParser;
  static emitter = new EventEmitter();

  static async List(): Promise<typeof PortInfo[]> {
    return SerialPort.list();
  }

  // Based off: https://medium.com/@machadogj/arduino-and-node-js-via-serial-port-bcf9691fab6a
  static Connect(port_info: string, baudrate: number) {
    this.port = new SerialPort({path: port_info, baudRate: baudrate, autoOpen: true}); // Create the new port and open it (autoOpen)
    this.parser = this.port.pipe(new ReadlineParser({delimiter: '\n'})); // Create a parser which parses based on a delimiter (\n)
    this.parser.on('data', (data: string) => { // Whenever JSON data is received, this is called
      console.log('New JSON Data: ', data);
      this.ParseJSON(data); // Call for the data to be converted from a string into an Object
    });
  }

  static ParseJSON(json_data: string): any { // TODO: Keep using any and a dispatcher?
    try {
      this.emitter.emit("PortManager:NewJSON", JSON.parse(json_data)); // Send out the parsed JSON Object for a dispatcher to handle
    } catch {
      console.log("Invalid JSON was attempted to be parsed"); // This is not a huge issue as long as it isn't happening too much
    }
  }

  static Write(json_obj: any) { // TODO: Don't write if the port is not open
    this.port.write(JSON.stringify(json_obj) + '\n'); // Convert the object to a string and append the terminator that indicates end of data (\n)
  }

  static Disconnect() { // TODO: Complains the port isn't open when called?
    this.port.close();
  }
}

PortManager.List().then((port_names) => console.log(port_names))
PortManager.Connect('COM5', 115200);
console.log("Connected!");
PortManager.Write({"LED": true});
setTimeout(() => PortManager.Write({"LED": false}), 2000);